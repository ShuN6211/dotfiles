# homebrew 
export HOMEBREW_PREFIX="/opt/homebrew";
export HOMEBREW_CELLAR="/opt/homebrew/Cellar";
export HOMEBREW_REPOSITORY="/opt/homebrew";
export PATH="/opt/homebrew/bin:/opt/homebrew/sbin${PATH+:$PATH}";
export MANPATH="/opt/homebrew/share/man${MANPATH+:$MANPATH}:";
export INFOPATH="/opt/homebrew/share/info:${INFOPATH:-}";

# poetry
export POETRY_HOME=$XDG_DATA_HOME/pypoetry
export PATH=$PATH:$HOME/.local/bin
export POETRY_CONFIG_DIR=$XDG_CONFIG_HOME/pypoetry
#export POETRY_DATA_DIR=$XDG_DATA_HOME/pypoetry
export POETRY_CACHE_DIR=$XDG_CACHE_HOME/pypoetry
export PATH=$POETRY_HOME/bin:$PATH

# fzf
export FZF_DEFAULT_OPTS='--reverse'

# perl
eval "$(perl -I$HOME/perl5/lib/perl5 -Mlocal::lib=$HOME/perl5)"

# java tomcat
#export JAVA_HOME=$(/usr/libexec/java_home v 1.0)
#export PATH=$PATH:$JAVA_HOME/bin
#export PATH=/opt/homebrew/opt/tomcat@8/bin:$PATH
#export CATALINA_HOME=/opt/homebrew/opt/tomcat@8/libexec
#export CATALINA_OPTS='-Dfile.encoding=UTF-8'
#export CLASSPATH=$CATALINA_HOME/lib/servlet-api.jar

# Rust
. "$HOME/.cargo/env"

# julia
export JULIA_DEPOT_PATH="$XDG_DATA_HOME/julia:$JULIA_DEPOT_PATH"

# alias
alias ls="ls -F"
alias la="ls -a"
alias ll="ls -l"
alias lla="ls -la"
alias mkdir="mkdir -p"
alias python="python3"

case "$OSTYPE" in
    darwin*)
        (( ${+commands[gdate]} )) && alias date='gdate'
        (( ${+commands[gls]} )) && alias ls='gls'
        (( ${+commands[gmkdir]} )) && alias mkdir='gmkdir'
        (( ${+commands[gcp]} )) && alias cp='gcp'
        (( ${+commands[gmv]} )) && alias mv='gmv'
        (( ${+commands[grm]} )) && alias rm='grm'
        (( ${+commands[gdu]} )) && alias du='gdu'
        (( ${+commands[ghead]} )) && alias head='ghead'
        (( ${+commands[gtail]} )) && alias tail='gtail'
        (( ${+commands[gsed]} )) && alias sed='gsed'
        (( ${+commands[ggrep]} )) && alias grep='ggrep'
        (( ${+commands[gfind]} )) && alias find='gfind'
        (( ${+commands[gdirname]} )) && alias dirname='gdirname'
        (( ${+commands[gxargs]} )) && alias xargs='gxargs'
    ;;
esac

## コマンド補完
zinit ice wait lucid
zinit light zsh-users/zsh-completions
autoload -Uz compinit && compinit

# zeno
export ZENO_HOME="$XDG_CONFIG_HOME/zeno"
export ZENO_ENABLE_SOCK=1
# export ZENO_DISABLE_BUILTIN_COMPLETION=1
export ZENO_GIT_CAT="bat --color=always"
export ZENO_GIT_TREE="exa --tree"
## zeno install ##
zinit ice lucid depth"1" blockf
zinit light yuki-yano/zeno.zsh

if [[ -n $ZENO_LOADED ]]; then
  # ここに任意のZLEの記述を行う
  bindkey ' '  zeno-auto-snippet
  bindkey '^m' zeno-auto-snippet-and-accept-line
  bindkey '^s' zeno-completion
  bindkey '^g' zeno-ghq-cd
  bindkey '^r' zeno-history-selection
  bindkey '^x' zeno-insert-snippet
fi

## 履歴補完
zinit ice wait lucid
zinit light zsh-users/zsh-autosuggestions
ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE="fg=244"
ZSH_AUTOSUGGEST_CLEAR_WIDGETS=(zeno-auto-snippet-and-accept-line $ZSH_AUTOSUGGEST_CLEAR_WIDGETS)

## シンタックスハイライト
zinit ice wait lucid
zinit light zdharma-continuum/fast-syntax-highlighting

